#!/usr/bin/env python

#test
import rospy
import can
import struct
from vehicle_msgs.msg import ThrustersCommand
bus = can.interface.Bus(channel='can0',bustype='socketcan',bitrate=1000000)

# max rpm
# Thruster com: int16
# 1 count = 0.2 rpm
# 32768 * 0.2 = 6553.6
dT = 0

def callback(message):
    mode = 0
    if message.mode == "rpm":
        for i in range():
            b1 = struct.pack('>h',int(message.Thruster1.rpm * 5))
            b2 = struct.pack('>h',int(message.Thruster2.rpm * 5))
            b3 = struct.pack('>h',int(message.Thruster3.rpm * 5))
            b4 = struct.pack('>h',int(message.Thruster4.rpm * 5))
            b5 = struct.pack('>h',int(message.Thruster5.rpm * 5))
            b6 = struct.pack('>h',int(message.Thruster6.rpm * 5))
            mode = 1
    if message.mode == "rate":
            b1 = struct.pack('>h',checkDeadband_rate(message.Thruster1.parsentage,100))
            b2 = struct.pack('>h',checkDeadband_rate(message.Thruster2.parsentage,100))
            b3 = struct.pack('>h',checkDeadband_rate(message.Thruster3.parsentage,100))
            b4 = struct.pack('>h',checkDeadband_rate(message.Thruster4.parsentage,100))
            b5 = struct.pack('>h',checkDeadband_rate(message.Thruster5.parsentage,100))
            b6 = struct.pack('>h',checkDeadband_rate(message.Thruster6.parsentage,100))
            mode = 2
    else:
            b1 = struct.pack('>h',0)
            b2 = struct.pack('>h',0)
            b3 = struct.pack('>h',0)
            b4 = struct.pack('>h',0)
            b5 = struct.pack('>h',0)
            b6 = struct.pack('>h',0)

    msg = can.Message(arbitration_id=0x73, dlc=1, data=[mode],extended_id=False)
    #print(msg)
    #bus.send(msg)
    msg = can.Message(arbitration_id=0x74, dlc=8, data=[b1[0], b1[1], b2[0], b2[1], b3[0], b3[1], b4[0], b4[1]],extended_id=False)
    bus.send(msg)
    print(msg)
    msg = can.Message(arbitration_id=0x75, dlc=4, data=[b5[0], b5[1], b6[0], b6[1]], extended_id=False)
    #bus.send(msg)
    #print("test")
	#can.Message(timestamp=0.0, arbitration_id=0, is_extended_id=None, is_remote_frame=False, 
	# is_error_frame=False, channel=None, dlc=None, data=None, is_fd=False, bitrate_switch=False, 
	# error_state_indicator=False, extended_id=True, check=False)
def checkDeadband_rate(a,band):
    t = int(a * 32767 / 100)
    if abs(t) < band:
        t = 0
    return t

def int_from_bytes(b):
    '''Convert big-endian signed integer bytearray to int
    int_from_bytes(b) == int.from_bytes(b, 'big', signed=True)'''
    if not b: # special-case 0 to avoid b[0] raising
        return 0
    n = b[0] & 0x7f # skip sign bit
    for by in b[1:]:
        n = n * 256 + by
    if b[0] & 0x80: # if sign bit is set, 2's complement
        bits = 8*len(b)
        offset = 2**(bits-1)
        return n - offset
    else:
        return n

def calctemp(msg,t):
	d = msg.data[0] * 2**24 + msg.data[1] * 2**16 + msg.data[2] * 2**8 + msg.data[3]
	out = 0
	if msg.arbitration_id == 21:
		t = d - 26951.0 * 2**8
		out = 2000.0 + t * 26700.0/(2**23)
	elif msg.arbitration_id == 20:
		OFF = 2848 *(2**16)+(17636*dT)/(2**7)
		SENS = 29566.0 * (2**15) + (17703.0 * dT)/(2**8)
		out = (d * SENS / (2**21) -OFF)/(2**13)
	return out
def main():
	#Ros configuration
    rospy.init_node('can_driver')
    sub = rospy.Subscriber('thrustcmd', ThrustersCommand,callback)
    r = rospy.Rate(1000)
    while not rospy.is_shutdown():
        msg = bus.recv(0.5)
	if msg.arbitration_id ==20:
        	print('Pressure: ')
		print(calctemp(msg))
	elif msg.arbitration_id == 21:
		print('Temp: ')
		print(calctemp(msg))       
        r.sleep()        

if __name__ == '__main__':
	main()


