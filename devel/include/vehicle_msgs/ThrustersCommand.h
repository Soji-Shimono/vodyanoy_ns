// Generated by gencpp from file vehicle_msgs/ThrustersCommand.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_THRUSTERSCOMMAND_H
#define VEHICLE_MSGS_MESSAGE_THRUSTERSCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <vehicle_msgs/ThrustCommand.h>
#include <vehicle_msgs/ThrustCommand.h>
#include <vehicle_msgs/ThrustCommand.h>
#include <vehicle_msgs/ThrustCommand.h>
#include <vehicle_msgs/ThrustCommand.h>
#include <vehicle_msgs/ThrustCommand.h>

namespace vehicle_msgs
{
template <class ContainerAllocator>
struct ThrustersCommand_
{
  typedef ThrustersCommand_<ContainerAllocator> Type;

  ThrustersCommand_()
    : Thruster1()
    , Thruster2()
    , Thruster3()
    , Thruster4()
    , Thruster5()
    , Thruster6()
    , mode()  {
    }
  ThrustersCommand_(const ContainerAllocator& _alloc)
    : Thruster1(_alloc)
    , Thruster2(_alloc)
    , Thruster3(_alloc)
    , Thruster4(_alloc)
    , Thruster5(_alloc)
    , Thruster6(_alloc)
    , mode(_alloc)  {
  (void)_alloc;
    }



   typedef  ::vehicle_msgs::ThrustCommand_<ContainerAllocator>  _Thruster1_type;
  _Thruster1_type Thruster1;

   typedef  ::vehicle_msgs::ThrustCommand_<ContainerAllocator>  _Thruster2_type;
  _Thruster2_type Thruster2;

   typedef  ::vehicle_msgs::ThrustCommand_<ContainerAllocator>  _Thruster3_type;
  _Thruster3_type Thruster3;

   typedef  ::vehicle_msgs::ThrustCommand_<ContainerAllocator>  _Thruster4_type;
  _Thruster4_type Thruster4;

   typedef  ::vehicle_msgs::ThrustCommand_<ContainerAllocator>  _Thruster5_type;
  _Thruster5_type Thruster5;

   typedef  ::vehicle_msgs::ThrustCommand_<ContainerAllocator>  _Thruster6_type;
  _Thruster6_type Thruster6;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::vehicle_msgs::ThrustersCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::ThrustersCommand_<ContainerAllocator> const> ConstPtr;

}; // struct ThrustersCommand_

typedef ::vehicle_msgs::ThrustersCommand_<std::allocator<void> > ThrustersCommand;

typedef boost::shared_ptr< ::vehicle_msgs::ThrustersCommand > ThrustersCommandPtr;
typedef boost::shared_ptr< ::vehicle_msgs::ThrustersCommand const> ThrustersCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::ThrustersCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::ThrustersCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'vehicle_msgs': ['/home/ubuntu/catkin_ws/src/vehicle_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::ThrustersCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::ThrustersCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::ThrustersCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::ThrustersCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::ThrustersCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::ThrustersCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::ThrustersCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39aeea5206baf8dd8128d11e0a1a393a";
  }

  static const char* value(const ::vehicle_msgs::ThrustersCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39aeea5206baf8ddULL;
  static const uint64_t static_value2 = 0x8128d11e0a1a393aULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::ThrustersCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/ThrustersCommand";
  }

  static const char* value(const ::vehicle_msgs::ThrustersCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::ThrustersCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ThrustCommand Thruster1\n"
"ThrustCommand Thruster2\n"
"ThrustCommand Thruster3\n"
"ThrustCommand Thruster4\n"
"ThrustCommand Thruster5\n"
"ThrustCommand Thruster6\n"
"string        mode\n"
"\n"
"================================================================================\n"
"MSG: vehicle_msgs/ThrustCommand\n"
"float64 rpm\n"
"float64 parsentage\n"
;
  }

  static const char* value(const ::vehicle_msgs::ThrustersCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::ThrustersCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Thruster1);
      stream.next(m.Thruster2);
      stream.next(m.Thruster3);
      stream.next(m.Thruster4);
      stream.next(m.Thruster5);
      stream.next(m.Thruster6);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ThrustersCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::ThrustersCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::ThrustersCommand_<ContainerAllocator>& v)
  {
    s << indent << "Thruster1: ";
    s << std::endl;
    Printer< ::vehicle_msgs::ThrustCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.Thruster1);
    s << indent << "Thruster2: ";
    s << std::endl;
    Printer< ::vehicle_msgs::ThrustCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.Thruster2);
    s << indent << "Thruster3: ";
    s << std::endl;
    Printer< ::vehicle_msgs::ThrustCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.Thruster3);
    s << indent << "Thruster4: ";
    s << std::endl;
    Printer< ::vehicle_msgs::ThrustCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.Thruster4);
    s << indent << "Thruster5: ";
    s << std::endl;
    Printer< ::vehicle_msgs::ThrustCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.Thruster5);
    s << indent << "Thruster6: ";
    s << std::endl;
    Printer< ::vehicle_msgs::ThrustCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.Thruster6);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_THRUSTERSCOMMAND_H
