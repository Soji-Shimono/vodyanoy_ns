# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/ThrustersState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import vehicle_msgs.msg

class ThrustersState(genpy.Message):
  _md5sum = "0fe2acc0070e119df72824cb8968d31b"
  _type = "vehicle_msgs/ThrustersState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ThrustState Thruster1
ThrustState Thruster2
ThrustState Thruster3
ThrustState Thruster4
ThrustState Thruster5
ThrustState Thruster6

================================================================================
MSG: vehicle_msgs/ThrustState
float64 rpm
float64 force
float64 valtage
float64 wattage
"""
  __slots__ = ['Thruster1','Thruster2','Thruster3','Thruster4','Thruster5','Thruster6']
  _slot_types = ['vehicle_msgs/ThrustState','vehicle_msgs/ThrustState','vehicle_msgs/ThrustState','vehicle_msgs/ThrustState','vehicle_msgs/ThrustState','vehicle_msgs/ThrustState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Thruster1,Thruster2,Thruster3,Thruster4,Thruster5,Thruster6

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ThrustersState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Thruster1 is None:
        self.Thruster1 = vehicle_msgs.msg.ThrustState()
      if self.Thruster2 is None:
        self.Thruster2 = vehicle_msgs.msg.ThrustState()
      if self.Thruster3 is None:
        self.Thruster3 = vehicle_msgs.msg.ThrustState()
      if self.Thruster4 is None:
        self.Thruster4 = vehicle_msgs.msg.ThrustState()
      if self.Thruster5 is None:
        self.Thruster5 = vehicle_msgs.msg.ThrustState()
      if self.Thruster6 is None:
        self.Thruster6 = vehicle_msgs.msg.ThrustState()
    else:
      self.Thruster1 = vehicle_msgs.msg.ThrustState()
      self.Thruster2 = vehicle_msgs.msg.ThrustState()
      self.Thruster3 = vehicle_msgs.msg.ThrustState()
      self.Thruster4 = vehicle_msgs.msg.ThrustState()
      self.Thruster5 = vehicle_msgs.msg.ThrustState()
      self.Thruster6 = vehicle_msgs.msg.ThrustState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_24d().pack(_x.Thruster1.rpm, _x.Thruster1.force, _x.Thruster1.valtage, _x.Thruster1.wattage, _x.Thruster2.rpm, _x.Thruster2.force, _x.Thruster2.valtage, _x.Thruster2.wattage, _x.Thruster3.rpm, _x.Thruster3.force, _x.Thruster3.valtage, _x.Thruster3.wattage, _x.Thruster4.rpm, _x.Thruster4.force, _x.Thruster4.valtage, _x.Thruster4.wattage, _x.Thruster5.rpm, _x.Thruster5.force, _x.Thruster5.valtage, _x.Thruster5.wattage, _x.Thruster6.rpm, _x.Thruster6.force, _x.Thruster6.valtage, _x.Thruster6.wattage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Thruster1 is None:
        self.Thruster1 = vehicle_msgs.msg.ThrustState()
      if self.Thruster2 is None:
        self.Thruster2 = vehicle_msgs.msg.ThrustState()
      if self.Thruster3 is None:
        self.Thruster3 = vehicle_msgs.msg.ThrustState()
      if self.Thruster4 is None:
        self.Thruster4 = vehicle_msgs.msg.ThrustState()
      if self.Thruster5 is None:
        self.Thruster5 = vehicle_msgs.msg.ThrustState()
      if self.Thruster6 is None:
        self.Thruster6 = vehicle_msgs.msg.ThrustState()
      end = 0
      _x = self
      start = end
      end += 192
      (_x.Thruster1.rpm, _x.Thruster1.force, _x.Thruster1.valtage, _x.Thruster1.wattage, _x.Thruster2.rpm, _x.Thruster2.force, _x.Thruster2.valtage, _x.Thruster2.wattage, _x.Thruster3.rpm, _x.Thruster3.force, _x.Thruster3.valtage, _x.Thruster3.wattage, _x.Thruster4.rpm, _x.Thruster4.force, _x.Thruster4.valtage, _x.Thruster4.wattage, _x.Thruster5.rpm, _x.Thruster5.force, _x.Thruster5.valtage, _x.Thruster5.wattage, _x.Thruster6.rpm, _x.Thruster6.force, _x.Thruster6.valtage, _x.Thruster6.wattage,) = _get_struct_24d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_24d().pack(_x.Thruster1.rpm, _x.Thruster1.force, _x.Thruster1.valtage, _x.Thruster1.wattage, _x.Thruster2.rpm, _x.Thruster2.force, _x.Thruster2.valtage, _x.Thruster2.wattage, _x.Thruster3.rpm, _x.Thruster3.force, _x.Thruster3.valtage, _x.Thruster3.wattage, _x.Thruster4.rpm, _x.Thruster4.force, _x.Thruster4.valtage, _x.Thruster4.wattage, _x.Thruster5.rpm, _x.Thruster5.force, _x.Thruster5.valtage, _x.Thruster5.wattage, _x.Thruster6.rpm, _x.Thruster6.force, _x.Thruster6.valtage, _x.Thruster6.wattage))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Thruster1 is None:
        self.Thruster1 = vehicle_msgs.msg.ThrustState()
      if self.Thruster2 is None:
        self.Thruster2 = vehicle_msgs.msg.ThrustState()
      if self.Thruster3 is None:
        self.Thruster3 = vehicle_msgs.msg.ThrustState()
      if self.Thruster4 is None:
        self.Thruster4 = vehicle_msgs.msg.ThrustState()
      if self.Thruster5 is None:
        self.Thruster5 = vehicle_msgs.msg.ThrustState()
      if self.Thruster6 is None:
        self.Thruster6 = vehicle_msgs.msg.ThrustState()
      end = 0
      _x = self
      start = end
      end += 192
      (_x.Thruster1.rpm, _x.Thruster1.force, _x.Thruster1.valtage, _x.Thruster1.wattage, _x.Thruster2.rpm, _x.Thruster2.force, _x.Thruster2.valtage, _x.Thruster2.wattage, _x.Thruster3.rpm, _x.Thruster3.force, _x.Thruster3.valtage, _x.Thruster3.wattage, _x.Thruster4.rpm, _x.Thruster4.force, _x.Thruster4.valtage, _x.Thruster4.wattage, _x.Thruster5.rpm, _x.Thruster5.force, _x.Thruster5.valtage, _x.Thruster5.wattage, _x.Thruster6.rpm, _x.Thruster6.force, _x.Thruster6.valtage, _x.Thruster6.wattage,) = _get_struct_24d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_24d = None
def _get_struct_24d():
    global _struct_24d
    if _struct_24d is None:
        _struct_24d = struct.Struct("<24d")
    return _struct_24d
